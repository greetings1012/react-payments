import{j as s}from"./jsx-runtime-DRTy3Uxn.js";import{r as m}from"./index-BBkUAzwr.js";import{I as F}from"./Input-DtQZF3FR.js";import{s as S}from"./CardInputPage.module-3tVdBXva.js";function y(e){return e.replace(/\s+/g," ").trimStart()}function A(e){return e.split("").filter(t=>t===" "||t.charCodeAt(0)>=65&&t.charCodeAt(0)<=90).join("")}const b="JOHN DOE";function g({ownerName:e,setOwnerName:t,isCompletedSections:c,setIsCompletedSections:p,isOpenForm:d,setIsOpenForm:u}){const[o,i]=m.useState(""),C=n=>{const r=A(n.target.value.toUpperCase()),a=y(r);if(r.length>a.length&&a.length!==0){i("공백을 연속으로 입력할 수 없습니다.");return}if(r.length<n.target.value.length){i("영어만 입력 가능합니다."),t(r);return}i(""),t(a)},I=n=>{if(n.target.value.length===0){i("이름을 입력해주세요.");return}i("")};return m.useEffect(()=>{const n=e.length!==0,r=[...c];r[3]=n,p(r);const a=N=>{if(N.key==="Enter"){const h=[...d];n===!0&&(h[4]=!0),u(h)}};return window.addEventListener("keypress",a),()=>{window.removeEventListener("keypress",a)}},[e]),s.jsxs(s.Fragment,{children:[s.jsx("div",{className:S.label,children:"소유자 이름"}),s.jsx("div",{className:S.horizon__gap__container,children:s.jsx(F,{onChange:C,isError:o.length!==0,placeholder:b,autoFocus:!0,maxLength:26,value:e,onBlur:I})}),s.jsx("div",{className:S.error_message,children:o!==""&&o})]})}g.__docgenInfo={description:"",methods:[],displayName:"CardOwnerNameInputField",props:{ownerName:{required:!0,tsType:{name:"string"},description:""},setOwnerName:{required:!0,tsType:{name:"Dispatch",elements:[{name:"SetStateAction",elements:[{name:"string"}],raw:"SetStateAction<string>"}],raw:"Dispatch<SetStateAction<string>>"},description:""},isCompletedSections:{required:!0,tsType:{name:"Array",elements:[{name:"boolean"}],raw:"boolean[]"},description:""},setIsCompletedSections:{required:!0,tsType:{name:"Dispatch",elements:[{name:"SetStateAction",elements:[{name:"Array",elements:[{name:"boolean"}],raw:"boolean[]"}],raw:"SetStateAction<boolean[]>"}],raw:"Dispatch<SetStateAction<boolean[]>>"},description:""},isOpenForm:{required:!0,tsType:{name:"Array",elements:[{name:"boolean"}],raw:"boolean[]"},description:""},setIsOpenForm:{required:!0,tsType:{name:"Dispatch",elements:[{name:"SetStateAction",elements:[{name:"Array",elements:[{name:"boolean"}],raw:"boolean[]"}],raw:"SetStateAction<boolean[]>"}],raw:"Dispatch<SetStateAction<boolean[]>>"},description:""}}};const j={title:"Field/CardOwnerNameInputField",component:g},E=e=>{const[t,c]=m.useState(""),[p,d]=m.useState([!1]),[u,o]=m.useState([!1]);return s.jsx(g,{...e,ownerName:t,setOwnerName:c,isCompletedSections:p,setIsCompletedSections:d,isOpenForm:u,setIsOpenForm:o})},l=E.bind({});l.args={};var w,f,O;l.parameters={...l.parameters,docs:{...(w=l.parameters)==null?void 0:w.docs,source:{originalSource:`args => {
  const [ownerName, setOwnerName] = useState<string>("");
  const [isCompletedSections, setIsCompletedSections] = useState<boolean[]>([false]);
  const [isOpenForm, setIsOpenForm] = useState<boolean[]>([false]);
  return <CardOwnerNameInputField {...args} ownerName={ownerName} setOwnerName={setOwnerName} isCompletedSections={isCompletedSections} setIsCompletedSections={setIsCompletedSections} isOpenForm={isOpenForm} setIsOpenForm={setIsOpenForm} />;
}`,...(O=(f=l.parameters)==null?void 0:f.docs)==null?void 0:O.source}}};const T=["Default"];export{l as Default,T as __namedExportsOrder,j as default};
