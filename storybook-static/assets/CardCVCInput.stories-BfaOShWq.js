import{j as t}from"./jsx-runtime-DRTy3Uxn.js";import{r as n}from"./index-BBkUAzwr.js";import{I as w}from"./Input-DtQZF3FR.js";import{s as u}from"./CardInputPage.module-3tVdBXva.js";const V="123";function C({cardCVC:r,setCardCVC:c,isCompletedSections:l,setIsCompletedSections:m,isOpenForm:d,setIsOpenForm:p,setIsCardPreviewFront:o}){const[i,s]=n.useState(""),b=e=>{if(isNaN(Number(e.target.value))){s("숫자만 입력해주세요.");return}s(""),c(e.target.value)},f=()=>{o(!1)},A=e=>{if(o(!0),e.target.value.length<3){s("CVC를 정확히 입력해주세요.");return}s("")};return n.useEffect(()=>{const e=[...l],S=r.length==3;e[4]=S,m(e);const g=[...d];S===!0&&(g[5]=!0),p(g)},[r]),t.jsxs(t.Fragment,{children:[t.jsx("div",{className:u.label,children:"CVC"}),t.jsx("div",{className:u.horizon__gap__container,children:t.jsx(w,{onChange:b,onFocus:f,isError:i.length!==0,placeholder:V,maxLength:3,autoFocus:!0,value:r,onBlur:A})}),t.jsx("div",{className:u.error_message,children:i!==""&&i})]})}C.__docgenInfo={description:"",methods:[],displayName:"CardCVCInputField",props:{cardCVC:{required:!0,tsType:{name:"string"},description:""},setCardCVC:{required:!0,tsType:{name:"Dispatch",elements:[{name:"SetStateAction",elements:[{name:"string"}],raw:"SetStateAction<string>"}],raw:"Dispatch<SetStateAction<string>>"},description:""},isCompletedSections:{required:!0,tsType:{name:"Array",elements:[{name:"boolean"}],raw:"boolean[]"},description:""},setIsCompletedSections:{required:!0,tsType:{name:"Dispatch",elements:[{name:"SetStateAction",elements:[{name:"Array",elements:[{name:"boolean"}],raw:"boolean[]"}],raw:"SetStateAction<boolean[]>"}],raw:"Dispatch<SetStateAction<boolean[]>>"},description:""},isOpenForm:{required:!0,tsType:{name:"Array",elements:[{name:"boolean"}],raw:"boolean[]"},description:""},setIsOpenForm:{required:!0,tsType:{name:"Dispatch",elements:[{name:"SetStateAction",elements:[{name:"Array",elements:[{name:"boolean"}],raw:"boolean[]"}],raw:"SetStateAction<boolean[]>"}],raw:"Dispatch<SetStateAction<boolean[]>>"},description:""},setIsCardPreviewFront:{required:!0,tsType:{name:"Dispatch",elements:[{name:"SetStateAction",elements:[{name:"boolean"}],raw:"SetStateAction<boolean>"}],raw:"Dispatch<SetStateAction<boolean>>"},description:""}}};const D={title:"Field/CardCVCInputField",component:C},y=r=>{const[c,l]=n.useState(""),[m,d]=n.useState([!1]),[p,o]=n.useState([!1]),[i,s]=n.useState(!0);return t.jsx(C,{...r,cardCVC:c,setCardCVC:l,isCompletedSections:m,setIsCompletedSections:d,isOpenForm:p,setIsOpenForm:o,setIsCardPreviewFront:s})},a=y.bind({});a.args={};var h,F,I;a.parameters={...a.parameters,docs:{...(h=a.parameters)==null?void 0:h.docs,source:{originalSource:`args => {
  const [cardCVC, setCardCVC] = useState<string>("");
  const [isCompletedSections, setIsCompletedSections] = useState<boolean[]>([false]);
  const [isOpenForm, setIsOpenForm] = useState<boolean[]>([false]);
  const [_, setIsCardPreviewFront] = useState<boolean>(true);
  return <CardCVCInputField {...args} cardCVC={cardCVC} setCardCVC={setCardCVC} isCompletedSections={isCompletedSections} setIsCompletedSections={setIsCompletedSections} isOpenForm={isOpenForm} setIsOpenForm={setIsOpenForm} setIsCardPreviewFront={setIsCardPreviewFront} />;
}`,...(I=(F=a.parameters)==null?void 0:F.docs)==null?void 0:I.source}}};const j=["Default"];export{a as Default,j as __namedExportsOrder,D as default};
